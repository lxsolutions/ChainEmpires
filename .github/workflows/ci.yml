


name: Chain Empires CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Unity License
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      run: |
        mkdir -p ~/.local/share/unity3d/Unity/
        echo $UNITY_LICENSE > ~/.local/share/unity3d/Unity/Unity_v20XX.XXXX.ulf

    - name: Set up Unity
      uses: game-ci/unity-builder@v2
      with:
        unityVersion: 2021.3.8f1

    - name: Build Android APK
      run: |
        unity -projectPath . -executeMethod BuildScript.BuildAlphaAPK -quit
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

    - name: Build iOS IPA
      run: |
        unity -projectPath . -executeMethod BuildScript.BuildAlphaIPA -quit
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

    - name: Upload Android APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: Builds/Android/ChainEmpires_Alpha.apk

    - name: Upload iOS IPA artifact
      uses: actions/upload-artifact@v3
      with:
        name: ios-ipa
        path: Builds/iOS/ChainEmpires_Alpha.ipa

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Unity License
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      run: |
        mkdir -p ~/.local/share/unity3d/Unity/
        echo $UNITY_LICENSE > ~/.local/share/unity3d/Unity/Unity_v20XX.XXXX.ulf

    - name: Set up Unity
      uses: game-ci/unity-builder@v2
      with:
        unityVersion: 2021.3.8f1

    - name: Run performance tests
      run: |
        unity -projectPath . -executeMethod PerformanceTestScript.RunPerformanceTest -quit
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: PerformanceTest_*.csv

  solana-test:
    name: Solana Integration Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.x'

    - name: Install Solana CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        sh -c "$(curl -sSfL https://release.solana.com/v1.9.17/install)"

    - name: Test Solana integration
      run: |
        # Test basic Solana CLI functionality
        solana --version

        # Test connection to devnet (no private keys used)
        solana config set --url https://api.devnet.solana.com
        solana account 4Nd1v1du4L0ngP4ssw0rd --commitment confirmed || echo "Expected failure - no real key"

    - name: Test Web3Integration script
      run: |
        # Verify the Web3 integration uses safe placeholders
        if grep -q "devnet-public-key-placeholder" Assets/Scripts/Web3/Web3Integration.cs; then
          echo "✓ Using safe testnet placeholder"
        else
          echo "✗ Testnet placeholder not found"
          exit 1
        fi

    - name: Test Solana SDK references
      run: |
        # Verify Solana SDK is properly referenced
        if grep -q "Solana.Unity.SDK" Assets/Scripts/Web3/Web3Integration.cs; then
          echo "✓ Solana SDK properly referenced"
        else
          echo "✗ Solana SDK reference missing"
          exit 1
        fi

  lint:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.x'

    - name: Run C# linting
      run: |
        dotnet tool install -g Roslynator.GlobalTools
        find . -name "*.cs" | xargs roslynator fix --fix-all

  store-asset-check:
    name: Store Asset Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Check store assets exist
      run: |
        if [ -d "Assets/Store" ]; then
          echo "✓ Store assets directory exists"
          ls -la Assets/Store
        else
          echo "✗ Store assets directory missing"
          exit 1
        fi

    - name: Check for required icons
      run: |
        if [ -f "Assets/Store/icon_512x512.png" ]; then
          echo "✓ Required store icon found"
        else
          echo "✗ Store icon missing. Creating placeholder..."
          mkdir -p Assets/Store
          convert -size 512x512 xc:black -fill white -gravity center -font Arial -pointsize 48 -draw "text 0,0 'CE'" Assets/Store/icon_512x512.png
          echo "✓ Created placeholder store icon"
        fi

