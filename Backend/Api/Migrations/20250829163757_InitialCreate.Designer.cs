// <auto-generated />
using System;
using ChainEmpires.Api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChainEmpires.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250829163757_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseNFTTokenId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("EliminatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MMR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PlayerAddress")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("character varying(42)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Payout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Distributed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DistributedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DistributionTransactionHash")
                        .HasColumnType("text");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Payouts");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChainTransactionHash")
                        .HasColumnType("text");

                    b.Property<bool>("CommittedToChain")
                        .HasColumnType("boolean");

                    b.Property<string>("LogHash")
                        .IsRequired()
                        .HasMaxLength(66)
                        .HasColumnType("character varying(66)");

                    b.Property<string>("MerkleRoot")
                        .HasMaxLength(66)
                        .HasColumnType("character varying(66)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WinnerEntryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("WinnerEntryId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Snapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(66)
                        .HasColumnType("character varying(66)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("Snapshots");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WinnerEntryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WinnerEntryId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdvanceCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("BuyInAmount")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("BuyInToken")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("RakeBps")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TableSize")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Entry", b =>
                {
                    b.HasOne("ChainEmpires.Api.Models.Entities.Table", "Table")
                        .WithMany("Entries")
                        .HasForeignKey("TableId");

                    b.HasOne("ChainEmpires.Api.Models.Entities.Tournament", "Tournament")
                        .WithMany("Entries")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Payout", b =>
                {
                    b.HasOne("ChainEmpires.Api.Models.Entities.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainEmpires.Api.Models.Entities.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Result", b =>
                {
                    b.HasOne("ChainEmpires.Api.Models.Entities.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainEmpires.Api.Models.Entities.Entry", "WinnerEntry")
                        .WithMany()
                        .HasForeignKey("WinnerEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("WinnerEntry");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Snapshot", b =>
                {
                    b.HasOne("ChainEmpires.Api.Models.Entities.Entry", "Entry")
                        .WithMany("Snapshots")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Table", b =>
                {
                    b.HasOne("ChainEmpires.Api.Models.Entities.Tournament", "Tournament")
                        .WithMany("Tables")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChainEmpires.Api.Models.Entities.Entry", "WinnerEntry")
                        .WithMany()
                        .HasForeignKey("WinnerEntryId");

                    b.Navigation("Tournament");

                    b.Navigation("WinnerEntry");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Entry", b =>
                {
                    b.Navigation("Snapshots");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Table", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("ChainEmpires.Api.Models.Entities.Tournament", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
