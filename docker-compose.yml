





# Chain Empires Tournament Development Environment
#
# This docker-compose file sets up the services needed for tournament development:
# - PostgreSQL database (for tournament data)
# - Redis cache (for session management and caching)
# - .NET API server (tournament management and chain integration)

version: '3.8'

services:
  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    container_name: chainempires_postgres
    environment:
      POSTGRES_DB: chainempires_tournament
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: chainempires_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # .NET API server for tournament management
  api:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: chainempires_api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=chainempires_tournament;Username=postgres;Password=postgres"
      ConnectionStrings__Redis: "redis:6379"
      ASPNETCORE_URLS: http://+:8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
    name: chainempires_net






