





# Chain Empires Local Development Environment
#
# This docker-compose file sets up the core services needed for local development:
# - PostgreSQL database (for persistent game data)
# - Redis cache (for session management and rate limiting)
# - .NET API server (telemetry, player persistence)
# - Headless Unity server (game authority)

version: '3.8'

services:
  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    container_name: chainempires_postgres
    environment:
      POSTGRES_DB: chainempires
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: securepassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: chainempires_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # .NET API server for telemetry and persistence
  api:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: chainempires_api
    environment:
      DATABASE_URL: "Host=postgres;Username=admin;Password=securepassword;Database=chainempires"
      REDIS_URL: "redis://redis:6379"
      API_PORT: 8082
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Headless Unity server for game authority
  headless_server:
    build:
      context: ./Server
      dockerfile: Dockerfile
    container_name: chainempires_headless
    environment:
      SERVER_PORT: 8081
      MAX_PLAYERS: 25
      DATABASE_URL: "Host=postgres;Username=admin;Password=securepassword;Database=chainempires"
      REDIS_URL: "redis://redis:6379"
    ports:
      - "8081:8081/udp" # Mirror networking uses UDP
      - "8081:8081/tcp" # HTTP API for admin tools
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Grafana for monitoring (optional)
  grafana:
    image: grafana/grafana-oss:latest
    container_name: chainempires_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: securepassword
    volumes:
      - grafana_data:/var/lib/grafana

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: chainempires_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./ops/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  default:
    driver: bridge
    name: chainempires_net






